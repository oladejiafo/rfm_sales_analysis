
###INSIGHT SQL CODES ####

-- -- -- Inspect Data More
SELECT distinct ProductName FROM `sales-371417.sales_data.clean_sales`;

-- --distinct transactions
SELECT distinct OrderID FROM `sales-371417.sales_data.clean_sales`;

-- --distinct users via addresses
SELECT distinct Address FROM `sales-371417.sales_data.clean_sales`;

-- -- unique states;
SELECT distinct state FROM `sales-371417.sales_data.clean_sales`; 

--- -- unique cities
SELECT distinct city FROM `sales-371417.sales_data.clean_sales`; 


####DATA PROCESSING SQL CTE CODES ####

With wt_total AS
(
  --Calculate total spent per transaction
  SELECT 
  *,
  (CAST(Qnty_Ordered as INT64) * CAST(Unit_Price as FLOAT64)) as Amt_Spent
  FROM `sales-371417.sales_data.clean_sales` 
),
wt_period AS 
(
  --Extract Date into Month and Year
  SELECT 
  *,
  EXTRACT(YEAR FROM DATE(PARSE_DATE('%m/%d/%y',split(Order_Date, ' ')[offset(0)]))) as Year,
  FORMAT_DATETIME("%B",DATE(PARSE_DATE('%m/%d/%y',split(Order_Date, ' ')[offset(0)]))) as Month 
  FROM wt_total
),
new_t as
(
  --Split Address to City and State
SELECT 
ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS ID,
*,
split(Address, ',')[offset(0)] as street,
split(Address, ',')[offset(1)] as city,
REVERSE(split(REVERSE(Address),' ')[offset(1)]) as state,
REVERSE(split(REVERSE(Address),' ')[offset(0)]) as ZIP
FROM wt_period
)
select * from new_t;
With wt_total AS
(
  --Calculate total spent per transaction
  SELECT 
  *,
  (CAST(Qnty_Ordered as INT64) * CAST(Unit_Price as FLOAT64)) as Amt_Spent


#### DATA INSIGHTS ####

-- --Best selling Month SELECT Month,Year, sum(Amt_Spent) Revenue, count(OrderID) Frequency FROM `sales-371417.sales_data.processed_sales` Group By Month, Year order by Year, Revenue desc;---- Sales per stateSELECT State, SUM(Amt_Spent) Revenue FROM `sales-371417.sales_data.processed_sales` Group By State order by Revenue desc;-- --Best selling Product SELECT ProductName, sum(Amt_Spent) Revenue FROM `sales-371417.sales_data.processed_sales` Group By ProductName order by Revenue desc;-- -- Operations only in January 2020, and 12 months in 2019 yearsSELECT distinct Month FROM `sales-371417.sales_data.processed_sales` Where Year =2019;-- -- operations only in 2019, 2020 yearsSELECT distinct Year FROM `sales-371417.sales_data.processed_sales`; -- Items Bought TogetherSELECT a.ProductName AS original_Product, b.ProductName AS bought_with, count(*) as times_bought_together  FROM `sales-371417.sales_data.processed_sales` AS a  INNER JOIN `sales-371417.sales_data.processed_sales` AS b ON a.OrderID = b.OrderID  AND a.ProductName != b.ProductName GROUP BY a.ProductName, b.ProductName;####RFM SQL CTE CODES ####

--RFM WITH rfm AS(  --RFM for best customerSELECT Address, sum(Amt_Spent) Monetary,Avg(Amt_Spent) Avg_Revenue,count(OrderID) Frequency,max(PARSE_DATE('%m/%d/%y',split(Order_Date, ' ')[offset(0)])) Last_Order_Date,(SELECT max(PARSE_DATE('%m/%d/%y',split(Order_Date, ' ')[offset(0)])) FROM `sales-371417.sales_data.processed_sales`) Max_Order_Date,DATE_DIFF(  (SELECT max(PARSE_DATE('%m/%d/%y',split(Order_Date, ' ')[offset(0)])) FROM `sales-371417.sales_data.processed_sales`),  max(PARSE_DATE('%m/%d/%y',split(Order_Date, ' ')[offset(0)])),   Day) RecencyFROM `sales-371417.sales_data.processed_sales` Group By Address order by Monetary desc),rfm_tile AS(-- Group customer patronage into 3SELECT *,NTILE(3) OVER(ORDER BY rfm.Recency desc) as rfm_rec_tile,NTILE(3) OVER(ORDER BY rfm.Frequency ) as rfm_freq_tile,NTILE(3) OVER(ORDER BY rfm.Monetary ) as rfm_mone_tilefrom rfm),rfm_scores AS(  --Create RFM ScoresSELECT *, (rfm_rec_tile + rfm_freq_tile + rfm_mone_tile) as rfm_val,CONCAT(CAST(rfm_rec_tile as string) , cast(rfm_freq_tile as String) , cast(rfm_mone_tile as String)) as rfm_scorefrom rfm_tileORDER BY rfm_score desc),rfm_levels AS (-- Segment into levelsSELECT distinct Address,Recency,Frequency,Monetary, rfm_rec_tile, rfm_freq_tile, rfm_mone_tile,CASE  WHEN rfm_score IN ('333','332','323','322', '223') THEN 'Super Customers'   WHEN rfm_score IN ('221','331','321','233','232','231','222') THEN 'Loyal Customers'   WHEN rfm_score IN ('213','212','132','133','123','122') THEN 'Potential Loyalist'  WHEN rfm_score IN ('313','312','311','211') THEN 'New Customers'    ELSE    'Churning Customers'END as rfm_levelFROM rfm_scores),final AS (-- -- Generate Unique Customer IDSELECT ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS ID, CONCAT('CN',CAST((RAND() * (899999) + 100000) as int))  as CustomerID, * FROM rfm_levels)SELECT * FROM final; -- count per level:SELECT rfm_level, count(*) as count FROM rfm_levels GROUP BY rfm_level-- --Calculate average values for each RFM_Level, and return a size of each segment:SELECT rfm_level, round(avg(Recency),2) as Recency_Mean, round(avg(Frequency),2) as Frequency_Mean, round(avg(Monetary),2) as Monetary_Mean,  count(*) as count FROM rfm_levels GROUP BY rfm_level order by Frequency_Mean desc